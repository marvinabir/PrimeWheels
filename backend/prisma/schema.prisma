generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  phone         String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookings      Booking[]
  reviews       Review[]
  notifications Notification[]
}

enum UserRole {
  USER
  ADMIN
  ORGANIZER
}

model Car {
  id                 String    @id @default(uuid())
  name               String
  brand              String
  registrationNumber String    @unique
  status             CarStatus @default(AVAILABLE)
  pricePerDay        Float
  imageUrl           String? 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  bookings           Booking[]
  reviews            Review[] 
  softDeleted        Boolean   @default(false)
}

enum CarStatus {
  AVAILABLE
  BOOKED
  INACTIVE
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  carId       String
  startDate   DateTime
  endDate     DateTime
  totalAmount Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  car         Car           @relation(fields: [carId], references: [id])
  ticket      Ticket?
  payment     Payment?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Ticket {
  id             String   @id @default(uuid())
  bookingId      String   @unique
  uniqueToken    String   @unique @default(uuid())
  createdAt      DateTime @default(now())
  userDetails    String 
  carDetails     String 
  bookingDetails String 
  booking        Booking  @relation(fields: [bookingId], references: [id])
}

model Payment {
  id            String         @id @default(uuid())
  bookingId     String         @unique
  amount        Float
  status        PaymentStatus  @default(PENDING)
  method        PaymentMethod  @default(MPESA)
  transactionId String? 
  createdAt     DateTime       @default(now())
  booking       Booking        @relation(fields: [bookingId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum PaymentMethod {
  MPESA
  CARD
  PAYPAL
}

model Event {
  id               String   @id @default(uuid())
  title            String
  description      String
  date             DateTime
  location         String
  imageUrl         String? 
  organizerContact String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  carId     String
  content   String
  rating    Int      @default(5)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  car       Car      @relation(fields: [carId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
